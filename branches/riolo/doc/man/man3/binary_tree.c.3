.TH "/Users/matthieuriolo/Sourcecode/libgenc/branches/riolo/trunk/src/binary_tree.c" 3 "Mon Aug 15 2011" ""c generic library"" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/matthieuriolo/Sourcecode/libgenc/branches/riolo/trunk/src/binary_tree.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include 'node.h'\fP
.br
\fC#include 'queue.h'\fP
.br
\fC#include 'stack.h'\fP
.br
\fC#include 'binary_tree.h'\fP
.br
\fC#include 'gen/error_macros.h'\fP
.br
\fC#include 'gen/access_macros.h'\fP
.br
\fC#include 'gen/control_macros.h'\fP
.br
\fC#include 'gen/function_macros.h'\fP
.br
\fC#include 'gen/function_signatures.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBNUM_LINKS\fP   3"
.br
.ti -1c
.RI "#define \fBPARENT\fP   (NUM_LINKS-1)"
.br
.ti -1c
.RI "#define \fBINSERT_RIGHT\fP(P, C)"
.br
.ti -1c
.RI "#define \fBINSERT_LEFT\fP(P, C)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int8_t \fBdump_Node\fP (\fBNode\fP *ptr)"
.br
.ti -1c
.RI "void \fBmove_to_free\fP (\fBBinaryTree\fP *tree, \fBNode\fP *root)"
.br
.ti -1c
.RI "\fBF_CONSTRUCT\fP (\fBBinaryTree\fP)"
.br
.ti -1c
.RI "\fBF_CONSTRUCT_FUNC\fP (\fBBinaryTree\fP)"
.br
.ti -1c
.RI "\fBF_DESTRUCT\fP (\fBBinaryTree\fP)"
.br
.ti -1c
.RI "\fBF_CLEAR\fP (\fBBinaryTree\fP)"
.br
.ti -1c
.RI "void * \fBinsert_BinaryTree\fP (\fBBinaryTree\fP *tree, void *obj, size_t objsize, int flag)"
.br
.ti -1c
.RI "int8_t \fBdelete_BinaryTree\fP (\fBBinaryTree\fP *tree, void *obj, size_t objsize)"
.br
.ti -1c
.RI "void * \fBfind_BinaryTree\fP (\fBBinaryTree\fP *tree, void *obj, size_t objsize)"
.br
.ti -1c
.RI "\fBF_DUPLICATE\fP (\fBBinaryTree\fP)"
.br
.ti -1c
.RI "void * \fBmax_BinaryTree\fP (\fBBinaryTree\fP *tree)"
.br
.ti -1c
.RI "void * \fBmin_BinaryTree\fP (\fBBinaryTree\fP *tree)"
.br
.ti -1c
.RI "\fBF_DUMP\fP (\fBBinaryTree\fP)"
.br
.ti -1c
.RI "\fBF_DUMP\fP (\fBNode\fP)"
.br
.ti -1c
.RI "\fBfunction\fP (size_of, \fBBinaryTree\fP)"
.br
.ti -1c
.RI "void \fBdestroy_BinaryTreeDFSIter\fP (\fBBinaryTreeDFSIter\fP *iter)"
.br
.ti -1c
.RI "void \fBdestroy_BinaryTreeBFSIter\fP (\fBBinaryTreeBFSIter\fP *iter)"
.br
.ti -1c
.RI "int8_t \fBassign_BinaryTreeBFSIter\fP (\fBBinaryTreeBFSIter\fP *iter, \fBBinaryTree\fP *obj)"
.br
.ti -1c
.RI "int8_t \fBassign_BinaryTreeIter\fP (\fBBinaryTreeIter\fP *iter, \fBBinaryTree\fP *obj)"
.br
.ti -1c
.RI "int8_t \fBassign_BinaryTreeDFSIter\fP (\fBBinaryTreeDFSIter\fP *iter, \fBBinaryTree\fP *obj)"
.br
.ti -1c
.RI "\fBBinaryTreeDFSIter\fP * \fBcreate_BinaryTreeDFSIter\fP (\fBBinaryTree\fP *obj)"
.br
.ti -1c
.RI "\fBBinaryTreeIter\fP * \fBcreate_BinaryTreeIter\fP (\fBBinaryTree\fP *obj)"
.br
.ti -1c
.RI "\fBBinaryTreeBFSIter\fP * \fBcreate_BinaryTreeBFSIter\fP (\fBBinaryTree\fP *obj)"
.br
.ti -1c
.RI "void * \fBretrieve_BinaryTreeBFSIter\fP (\fBBinaryTreeBFSIter\fP *iter)"
.br
.ti -1c
.RI "void * \fBretrieve_BinaryTreeDFSIter\fP (\fBBinaryTreeDFSIter\fP *iter)"
.br
.ti -1c
.RI "void * \fBretrieve_BinaryTreeIter\fP (\fBBinaryTreeIter\fP *iter)"
.br
.ti -1c
.RI "int8_t \fBprev_BinaryTreeIter\fP (\fBBinaryTreeIter\fP *iter)"
.br
.ti -1c
.RI "int8_t \fBnext_BinaryTreeIter\fP (\fBBinaryTreeIter\fP *iter)"
.br
.ti -1c
.RI "int8_t \fBnext_BinaryTreeBFSIter\fP (\fBBinaryTreeBFSIter\fP *iter)"
.br
.ti -1c
.RI "int8_t \fBnext_BinaryTreeDFSIter\fP (\fBBinaryTreeDFSIter\fP *iter)"
.br
.ti -1c
.RI "int8_t \fBhead_BinaryTreeBFSIter\fP (\fBBinaryTreeBFSIter\fP *iter)"
.br
.ti -1c
.RI "int8_t \fBhead_BinaryTreeDFSIter\fP (\fBBinaryTreeDFSIter\fP *iter)"
.br
.ti -1c
.RI "int8_t \fBhead_BinaryTreeIter\fP (\fBBinaryTreeIter\fP *iter)"
.br
.ti -1c
.RI "int8_t \fBtail_BinaryTreeBFSIter\fP (\fBBinaryTreeBFSIter\fP *iter)"
.br
.ti -1c
.RI "int8_t \fBtail_BinaryTreeIter\fP (\fBBinaryTreeIter\fP *iter)"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define INSERT_LEFT(P, C)"\fBValue:\fP
.PP
.nf
{\
        (C)->ptr[LEFT] = (P)->ptr[LEFT];\
        (P)->ptr[LEFT] = C;\
        (C)->ptr[PARENT] = P;\
        S(tree)++;\
}
.fi
.PP
Definition at line 51 of file binary_tree.c.
.SS "#define INSERT_RIGHT(P, C)"\fBValue:\fP
.PP
.nf
{\
        (C)->ptr[RIGHT] = (P)->ptr[RIGHT];\
        (P)->ptr[RIGHT] = C;\
        (C)->ptr[PARENT] = P;\
        S(tree)++;\
}
.fi
.PP
Definition at line 41 of file binary_tree.c.
.SS "#define NUM_LINKS   3"
.PP
Definition at line 28 of file binary_tree.c.
.SS "#define PARENT   (NUM_LINKS-1)"
.PP
Definition at line 34 of file binary_tree.c.
.SH "Function Documentation"
.PP 
.SS "int8_t assign_BinaryTreeBFSIter (\fBBinaryTreeBFSIter\fP *iter, \fBBinaryTree\fP *obj)"
.PP
Definition at line 365 of file binary_tree.c.
.SS "int8_t assign_BinaryTreeDFSIter (\fBBinaryTreeDFSIter\fP *iter, \fBBinaryTree\fP *obj)"
.PP
Definition at line 389 of file binary_tree.c.
.SS "int8_t assign_BinaryTreeIter (\fBBinaryTreeIter\fP *iter, \fBBinaryTree\fP *obj)"
.PP
Definition at line 378 of file binary_tree.c.
.SS "\fBBinaryTreeBFSIter\fP* create_BinaryTreeBFSIter (\fBBinaryTree\fP *obj)"
.PP
Definition at line 425 of file binary_tree.c.
.SS "\fBBinaryTreeDFSIter\fP* create_BinaryTreeDFSIter (\fBBinaryTree\fP *obj)"
.PP
Definition at line 400 of file binary_tree.c.
.SS "\fBBinaryTreeIter\fP* create_BinaryTreeIter (\fBBinaryTree\fP *obj)"
.PP
Definition at line 413 of file binary_tree.c.
.SS "int8_t delete_BinaryTree (\fBBinaryTree\fP *tree, void *obj, size_tobjsize)"
.PP
Definition at line 154 of file binary_tree.c.
.SS "void destroy_BinaryTreeBFSIter (\fBBinaryTreeBFSIter\fP *iter)"
.PP
Definition at line 358 of file binary_tree.c.
.SS "void destroy_BinaryTreeDFSIter (\fBBinaryTreeDFSIter\fP *iter)"
.PP
Definition at line 350 of file binary_tree.c.
.SS "int8_t dump_Node (\fBNode\fP *ptr)"
.SS "F_CLEAR (\fBBinaryTree\fP)"
.PP
Definition at line 108 of file binary_tree.c.
.SS "F_CONSTRUCT (\fBBinaryTree\fP)"
.PP
Definition at line 60 of file binary_tree.c.
.SS "F_CONSTRUCT_FUNC (\fBBinaryTree\fP)"
.PP
Definition at line 70 of file binary_tree.c.
.SS "F_DESTRUCT (\fBBinaryTree\fP)"
.PP
Definition at line 80 of file binary_tree.c.
.SS "F_DUMP (\fBBinaryTree\fP)"
.PP
Definition at line 314 of file binary_tree.c.
.SS "F_DUMP (\fBNode\fP)"
.PP
Definition at line 321 of file binary_tree.c.
.SS "F_DUPLICATE (\fBBinaryTree\fP)"
.PP
Definition at line 262 of file binary_tree.c.
.SS "void* find_BinaryTree (\fBBinaryTree\fP *tree, void *obj, size_tobjsize)"
.PP
Definition at line 245 of file binary_tree.c.
.SS "function (size_of, \fBBinaryTree\fP)"
.PP
Definition at line 338 of file binary_tree.c.
.SS "int8_t head_BinaryTreeBFSIter (\fBBinaryTreeBFSIter\fP *iter)"
.PP
Definition at line 550 of file binary_tree.c.
.SS "int8_t head_BinaryTreeDFSIter (\fBBinaryTreeDFSIter\fP *iter)"
.PP
Definition at line 561 of file binary_tree.c.
.SS "int8_t head_BinaryTreeIter (\fBBinaryTreeIter\fP *iter)"
.PP
Definition at line 572 of file binary_tree.c.
.SS "void* insert_BinaryTree (\fBBinaryTree\fP *tree, void *obj, size_tobjsize, intflag)"
.PP
Definition at line 117 of file binary_tree.c.
.SS "void* max_BinaryTree (\fBBinaryTree\fP *tree)"
.PP
Definition at line 291 of file binary_tree.c.
.SS "void* min_BinaryTree (\fBBinaryTree\fP *tree)"
.PP
Definition at line 303 of file binary_tree.c.
.SS "void move_to_free (\fBBinaryTree\fP *tree, \fBNode\fP *root)"
.SS "int8_t next_BinaryTreeBFSIter (\fBBinaryTreeBFSIter\fP *iter)"
.PP
Definition at line 525 of file binary_tree.c.
.SS "int8_t next_BinaryTreeDFSIter (\fBBinaryTreeDFSIter\fP *iter)"
.PP
Definition at line 538 of file binary_tree.c.
.SS "int8_t next_BinaryTreeIter (\fBBinaryTreeIter\fP *iter)"
.PP
Definition at line 497 of file binary_tree.c.
.SS "int8_t prev_BinaryTreeIter (\fBBinaryTreeIter\fP *iter)"
.PP
Definition at line 467 of file binary_tree.c.
.SS "void* retrieve_BinaryTreeBFSIter (\fBBinaryTreeBFSIter\fP *iter)"
.PP
Definition at line 439 of file binary_tree.c.
.SS "void* retrieve_BinaryTreeDFSIter (\fBBinaryTreeDFSIter\fP *iter)"
.PP
Definition at line 445 of file binary_tree.c.
.SS "void* retrieve_BinaryTreeIter (\fBBinaryTreeIter\fP *iter)"
.PP
Definition at line 450 of file binary_tree.c.
.SS "int8_t tail_BinaryTreeBFSIter (\fBBinaryTreeBFSIter\fP *iter)"
.PP
Definition at line 582 of file binary_tree.c.
.SS "int8_t tail_BinaryTreeIter (\fBBinaryTreeIter\fP *iter)"
.PP
Definition at line 590 of file binary_tree.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for 'c generic library' from the source code.
