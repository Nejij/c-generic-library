.TH "/Users/matthieuriolo/Sourcecode/libgenc/branches/riolo/trunk/src/vector.c" 3 "Mon Aug 15 2011" ""c generic library"" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/matthieuriolo/Sourcecode/libgenc/branches/riolo/trunk/src/vector.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <string.h>\fP
.br
\fC#include <stdio.h>\fP
.br
\fC#include <stddef.h>\fP
.br
\fC#include 'gen/data_types.h'\fP
.br
\fC#include 'vector.h'\fP
.br
\fC#include 'gen/error_macros.h'\fP
.br
\fC#include 'gen/access_macros.h'\fP
.br
\fC#include 'gen/function_macros.h'\fP
.br
\fC#include 'gen/control_arr_macros.h'\fP
.br
\fC#include 'gen/function_signatures.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBD\fP(X)   ((char *)(H((X))))"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBF_CONSTRUCT\fP (\fBVector\fP)"
.br
.ti -1c
.RI "\fBF_CONSTRUCT_FUNC\fP (\fBVector\fP)"
.br
.ti -1c
.RI "\fBF_DESTRUCT\fP (\fBVector\fP)"
.br
.ti -1c
.RI "\fBF_CLEAR\fP (\fBVector\fP)"
.br
.ti -1c
.RI "int8_t \fBinsert_at_Vector\fP (\fBVector\fP *vec, void *obj, uint32_t loc)"
.br
.RI "\fIinserts into the array at a specific index the object This is the equivalent of the vec[index] = obj operation \fP"
.ti -1c
.RI "int8_t \fBpush_back_Vector\fP (\fBVector\fP *vec, void *obj, size_t objsize, int flag)"
.br
.ti -1c
.RI "int8_t \fBpush_front_Vector\fP (\fBVector\fP *vec, void *obj, size_t objsize, int flag)"
.br
.ti -1c
.RI "int8_t \fBpop_back_Vector\fP (\fBVector\fP *vec)"
.br
.ti -1c
.RI "int8_t \fBpop_front_Vector\fP (\fBVector\fP *vec)"
.br
.ti -1c
.RI "void * \fBfront_Vector\fP (\fBVector\fP *vec)"
.br
.ti -1c
.RI "void * \fBback_Vector\fP (\fBVector\fP *vec)"
.br
.ti -1c
.RI "void * \fBreturn_at_Vector\fP (\fBVector\fP *vec, uint32_t loc)"
.br
.RI "\fIreturns the object from the vector at the given point \fP"
.ti -1c
.RI "int8_t \fBresize_Vector\fP (\fBVector\fP *vec, size_t size)"
.br
.RI "\fIresizes the array that is inside of the vector and copies the first n objects over to the new array \fP"
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define D(X)   ((char *)(H((X))))"
.PP
Definition at line 21 of file vector.c.
.SH "Function Documentation"
.PP 
.SS "void* back_Vector (\fBVector\fP *vec)"
.PP
Definition at line 200 of file vector.c.
.SS "F_CLEAR (\fBVector\fP)"
.PP
Definition at line 48 of file vector.c.
.SS "F_CONSTRUCT (\fBVector\fP)"
.PP
Definition at line 23 of file vector.c.
.SS "F_CONSTRUCT_FUNC (\fBVector\fP)"
.PP
Definition at line 29 of file vector.c.
.SS "F_DESTRUCT (\fBVector\fP)"
.PP
Definition at line 40 of file vector.c.
.SS "void* front_Vector (\fBVector\fP *vec)"
.PP
Definition at line 194 of file vector.c.
.SS "int8_t insert_at_Vector (\fBVector\fP *vec, void *obj, uint32_tloc)"
.PP
inserts into the array at a specific index the object This is the equivalent of the vec[index] = obj operation \fBParameters:\fP
.RS 4
\fIvec\fP the vector to insert the object into 
.br
\fIobj\fP the object to insert into the array 
.br
\fIloc\fP the location in the array to put the item 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, non-zero on error 
.RE
.PP

.PP
Definition at line 102 of file vector.c.
.SS "int8_t pop_back_Vector (\fBVector\fP *vec)"
.PP
Definition at line 171 of file vector.c.
.SS "int8_t pop_front_Vector (\fBVector\fP *vec)"
.PP
Definition at line 182 of file vector.c.
.SS "int8_t push_back_Vector (\fBVector\fP *vec, void *obj, size_tobjsize, intflag)"
.PP
Definition at line 147 of file vector.c.
.SS "int8_t push_front_Vector (\fBVector\fP *vec, void *obj, size_tobjsize, intflag)"
.PP
Definition at line 158 of file vector.c.
.SS "int8_t resize_Vector (\fBVector\fP *vec, size_tsize)"
.PP
resizes the array that is inside of the vector and copies the first n objects over to the new array \fBParameters:\fP
.RS 4
\fIvec\fP the vector to resize 
.br
\fIsize\fP the size to resize the vector to 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, non-zero otherwise 
.RE
.PP

.PP
Definition at line 230 of file vector.c.
.SS "void* return_at_Vector (\fBVector\fP *vec, uint32_tloc)"
.PP
returns the object from the vector at the given point \fBParameters:\fP
.RS 4
\fIvec\fP the vector to return the object into 
.br
\fIloc\fP the loc in the array to return the object from 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the object on success, NULL on error 
.RE
.PP

.PP
Definition at line 207 of file vector.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for 'c generic library' from the source code.
