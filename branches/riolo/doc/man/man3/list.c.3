.TH "/Users/matthieuriolo/Sourcecode/libgenc/branches/riolo/trunk/src/list.c" 3 "Mon Aug 15 2011" ""c generic library"" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/matthieuriolo/Sourcecode/libgenc/branches/riolo/trunk/src/list.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include 'node.h'\fP
.br
\fC#include 'list.h'\fP
.br
\fC#include 'gen/data_types.h'\fP
.br
\fC#include 'gen/error_macros.h'\fP
.br
\fC#include 'gen/access_macros.h'\fP
.br
\fC#include 'gen/control_macros.h'\fP
.br
\fC#include 'gen/function_macros.h'\fP
.br
\fC#include 'gen/function_signatures.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBNUM_LINKS\fP   2"
.br
.ti -1c
.RI "#define \fBINSERT_NODE\fP(X, Y, Z)"
.br
.ti -1c
.RI "#define \fBSORT_LIST\fP(W, X, Y, Z)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBF_CONSTRUCT\fP (\fBList\fP)"
.br
.ti -1c
.RI "\fBF_CONSTRUCT_FUNC\fP (\fBList\fP)"
.br
.ti -1c
.RI "\fBF_DESTRUCT\fP (\fBList\fP)"
.br
.ti -1c
.RI "\fBF_CLEAR\fP (\fBList\fP)"
.br
.ti -1c
.RI "int8_t \fBpush_front_List\fP (\fBList\fP *list, void *obj, size_t objsize, int flag)"
.br
.ti -1c
.RI "int8_t \fBpush_back_List\fP (\fBList\fP *list, void *obj, size_t objsize, int flag)"
.br
.ti -1c
.RI "int8_t \fBpop_front_List\fP (\fBList\fP *list)"
.br
.ti -1c
.RI "int8_t \fBpop_back_List\fP (\fBList\fP *list)"
.br
.ti -1c
.RI "void * \fBfront_List\fP (\fBList\fP *list)"
.br
.ti -1c
.RI "void * \fBback_List\fP (\fBList\fP *list)"
.br
.ti -1c
.RI "void * \fBinsert_List\fP (\fBList\fP *list, void *obj, size_t objsize, int flag)"
.br
.ti -1c
.RI "int8_t \fBdelete_List\fP (\fBList\fP *list, void *obj, size_t objsize)"
.br
.ti -1c
.RI "void * \fBfind_List\fP (\fBList\fP *list, void *obj, size_t objsize)"
.br
.ti -1c
.RI "int8_t \fBsort_List\fP (\fBList\fP *list, size_t objsize)"
.br
.ti -1c
.RI "\fBF_PRINT\fP (\fBList\fP)"
.br
.ti -1c
.RI "\fBF_EMPTY\fP (\fBList\fP)"
.br
.ti -1c
.RI "\fBF_SIZE\fP (\fBList\fP)"
.br
.ti -1c
.RI "void * \fBto_array_List\fP (\fBList\fP *list, size_t objsize)"
.br
.ti -1c
.RI "\fBITER\fP (\fBList\fP)"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define INSERT_NODE(X, Y, Z)"\fBValue:\fP
.PP
.nf
{\
        if((Y) == H((Z))) {\
                H((Z)) = (X);\
        } \
        N(X) = (Y);\
        P(X) = P(Y);\
        P(Y) = (X);\
        if(P(X)) { \
                N(P(X)) = (X);\
        }\
        S(Z)++;\
}
.fi
.PP
Definition at line 30 of file list.c.
.SS "#define NUM_LINKS   2"
.PP
Definition at line 23 of file list.c.
.SS "#define SORT_LIST(W, X, Y, Z)"\fBValue:\fP
.PP
.nf
{\
        int x = 0;\
        Node *iter;\
        FOR_EACH_NODE(iter,(X)) {\
                (X)->API.copy(&(W)[x++ * (Z)],(char *)iter->objptr,(Z));\
        }\
        qsort((W),S((X)),(Z),(Y));\
        x = 0;\
        FOR_EACH_NODE(iter,(X)) {\
                (X)->API.copy((char *)iter->objptr,&(W)[x++ * (Z)],(Z));\
        }\
}
.fi
.PP
Definition at line 47 of file list.c.
.SH "Function Documentation"
.PP 
.SS "void* back_List (\fBList\fP *list)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to get the back object from 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to obj on success, NULL otherwise 
.RE
.PP

.PP
Definition at line 195 of file list.c.
.SS "int8_t delete_List (\fBList\fP *list, void *obj, size_tobjsize)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to delete the object from 
.br
\fIobj\fP a pointer to the object to be deleted 
.br
\fIobjsize\fP the size of the object being deleted 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on sucess, non-zero on error 
.RE
.PP

.PP
Definition at line 277 of file list.c.
.SS "F_CLEAR (\fBList\fP)"
.PP
Definition at line 96 of file list.c.
.SS "F_CONSTRUCT (\fBList\fP)"
.PP
Definition at line 64 of file list.c.
.SS "F_CONSTRUCT_FUNC (\fBList\fP)"
.PP
Definition at line 74 of file list.c.
.SS "F_DESTRUCT (\fBList\fP)"
.PP
Definition at line 84 of file list.c.
.SS "F_EMPTY (\fBList\fP)"
.PP
Definition at line 390 of file list.c.
.SS "F_PRINT (\fBList\fP)"
.PP
Definition at line 380 of file list.c.
.SS "F_SIZE (\fBList\fP)"
.PP
Definition at line 396 of file list.c.
.SS "void* find_List (\fBList\fP *list, void *obj, size_tobjsize)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to search the object for 
.br
\fIobj\fP the object to find in the list 
.br
\fIobjsize\fP the size of the object to find 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to object on success, NULL on error 
.RE
.PP

.PP
Definition at line 300 of file list.c.
.SS "void* front_List (\fBList\fP *list)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to get the front object from 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to obj on success, NULL otherwise 
.RE
.PP

.PP
Definition at line 187 of file list.c.
.SS "void* insert_List (\fBList\fP *list, void *obj, size_tobjsize, intflag)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to insert the object into 
.br
\fIobj\fP a pointer to the object to insert 
.br
\fIobjsize\fP the size of the object being inserted 
.br
\fIflag\fP dynamic or static flag 
.RE
.PP
\fBReturns:\fP
.RS 4
ptr to object, NULL on error 
.RE
.PP

.PP
Definition at line 203 of file list.c.
.SS "ITER (\fBList\fP)\fC [read]\fP"
.PP
Definition at line 419 of file list.c.
.SS "int8_t pop_back_List (\fBList\fP *list)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to pop the back object off of 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, non-zero on failure 
.RE
.PP

.PP
Definition at line 169 of file list.c.
.SS "int8_t pop_front_List (\fBList\fP *list)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to pop the front object off of 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, non-zero on failure 
.RE
.PP

.PP
Definition at line 151 of file list.c.
.SS "int8_t push_back_List (\fBList\fP *list, void *obj, size_tobjsize, intflag)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to push the object onto 
.br
\fIobj\fP the object to push to the back of the list 
.br
\fIobjsize\fP the size of the object 
.br
\fIflag\fP dynamic or static flag 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, non-zero on failure 
.RE
.PP

.PP
Definition at line 127 of file list.c.
.SS "int8_t push_front_List (\fBList\fP *list, void *obj, size_tobjsize, intflag)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to push the object onto 
.br
\fIobj\fP the object to push to the front of the list 
.br
\fIobjsize\fP the size of the object 
.br
\fIflag\fP dynamic or static flag 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, non-zero on failure 
.RE
.PP

.PP
Definition at line 102 of file list.c.
.SS "int8_t sort_List (\fBList\fP *list, size_tobjsize)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to sort the objects in 
.br
\fIobjsize\fP the size of the objects being sorted 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, non-zero on error 
.RE
.PP

.PP
Definition at line 318 of file list.c.
.SS "void* to_array_List (\fBList\fP *list, size_tobjsize)"\fBParameters:\fP
.RS 4
\fIlist\fP the list to turn into an array 
.br
\fIobjsize\fP the size of the objects in the list 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to array or null on error 
.RE
.PP

.PP
Definition at line 403 of file list.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for 'c generic library' from the source code.
